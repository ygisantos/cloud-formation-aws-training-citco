AWSTemplateFormatVersion: 2010-09-09
Description: "Sample Lambda Function using CFN"

Parameters:
  functionName:
    Description: "Name of the Lambda Function"
    Type: "String"
    Default: "fnHelloWorldCfn"
  s3Bucket:
    Description: "S3 bucket of the lambda function"
    Type: "String"
    Default: "ysm-trn-cfn-scripts"
  lambdaZipFile:
    Description: "Zip file path of the lambda function in S3"
    Type: "String"
    Default: "helloWorld.zip"
  lambdaHandler:
    Description: "Handler of the lambda function"
    Type: "String"
    Default: "s3_lambda.handler"
  s3BucketToMonitor:
    Description: "S3 Bucket Name we will use to monitor the events"
    Type: String
    Default: "yms-trn-s3lambda-int"
  

Resources: 
  myLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref s3Bucket                              # bucket name
        S3Key: !Join ["/", ["lambda", !Ref lambdaZipFile]]
      Description: "Sample Lambda using CFN"
      FunctionName: !Ref functionName     
      Handler: !Ref lambdaHandler         
      Role: !GetAtt lambdaFunctionRole.Arn
      Runtime: "python3.12" 
      Timeout: 60                                            





  # ====================================
  # DYNAMIC LAMBDA ROLE
  # ====================================
  lambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Join [" ", ["IAM Role for ", !Ref functionName, "lambda function"]]
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"           
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      RoleName: !Join ["-", [!Ref functionName, "lambda", "role"]]
      Policies:
        - PolicyName: !Join ["-", [!Ref functionName, "execution", "policy"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "logs:CreateLogGroup"
                Resource: 
                  - "arn:aws:logs:*:*:*"    
              - Effect: Allow
                Action: 
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - !Join ["", ["arn:aws:logs:*:*:log-group:/aws/lambda/", !Ref functionName, ":*"] ]  
  # ====================================
  # DYNAMIC LAMBDA ROLE
  # ====================================



  myS3Bucket:
    Type: AWS::S3::Bucket
    DependsOn: s3LambdaInvokePermission
    Properties:
      BucketName: !Ref s3BucketToMonitor
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt myLambda.Arn

  # Required to allow s3 to invoke a lambda
  s3LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"         # to allows invoke of lambda
      FunctionName: !GetAtt myLambda.Arn      # Lambda to invoke
      Principal: "s3.amazonaws.com"           # who will invoke the lambda
      SourceAccount: !Ref "AWS::AccountId"    # DO NOT CHANGE
      # DO NOT CHANGE EXCEPT FOR s3 (Service)
      SourceArn: !Join ["", ["arn:aws:s3:::", !Ref s3BucketToMonitor]]

  