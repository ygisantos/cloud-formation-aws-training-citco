AWSTemplateFormatVersion: 2010-09-09
Description: "Sample Lambda Function using CFN"

Parameters:
  s3Bucket:
    Description: "S3 bucket of the lambda function"
    Type: "String"
    Default: "ysm-trn-cfn-scripts"

  s3BucketToMonitor:
    Description: "S3 Bucket Name we will use to monitor the events"
    Type: String
    Default: "yms-trn-s3lambda-int"

  # Lambda Producer
  producerFunctionName:
    Description: "Name of the Lambda Provider Function"
    Type: "String"
    Default: "fnS3LambdaProviderCfn"
  producerLambdaZipFile:
    Description: "Zip file path of the lambda function in S3"
    Type: "String"
    Default: "s3_lambda_producer.zip"
  producerLambdaHandler:
    Description: "Handler of the lambda function"
    Type: "String"
    Default: "s3_lambda_producer.handler"

  # Lambda Consumer
  consumerFunctionName:
    Description: "Name of the Lambda Consumer Function"
    Type: "String"
    Default: "fnS3LambdaConsumerCfn"
  consumerLambdaZipFile:
    Description: "Zip file path of the lambda consumer function in S3"
    Type: "String"
    Default: "s3_lambda_consumer.zip"
  consumerLambdaHandler:
    Description: "Handler of the lambda consumer function"
    Type: "String"
    Default: "s3_lambda_consumer.handler"

  queueName:
    Type: "String"
    Description: "SQS Queue Name"
    Default: "s3EventsQueue"

Resources: 

  # lambda producer
  myLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref s3Bucket
        S3Key: !Join ["/", ["lambda", !Ref producerLambdaZipFile]]
      Description: "Sample Lambda using CFN"
      FunctionName: !Ref producerFunctionName
      Environment:
        Variables:
          QUEUE_URL: !GetAtt mySqs.QueueUrl
      Handler: !Ref producerLambdaHandler
      Role: !GetAtt lambdaFunctionRole.Arn
      Runtime: "python3.12"
      Timeout: 60

  lambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Join [" ", ["IAM Role for ", !Ref producerFunctionName, " lambda function"]]
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"           
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      RoleName: !Join ["-", [!Ref producerFunctionName, "lambda", "role"]]
      Policies:
        - PolicyName: !Join ["-", [!Ref producerFunctionName, "execution", "policy"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "logs:CreateLogGroup"
                Resource: 
                  - "arn:aws:logs:*:*:*"    
              - Effect: Allow
                Action: 
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - !Join ["", ["arn:aws:logs:*:*:log-group:/aws/lambda/", !Ref producerFunctionName, ":*"]]  
              - Effect: Allow
                Action:
                  - "sqs:SendMessage"
                Resource:
                  - !GetAtt mySqs.Arn

  # lambda consumer
  consumerMyLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref s3Bucket
        S3Key: !Join ["/", ["lambda", !Ref consumerLambdaZipFile]]
      Description: "Sample Lambda using CFN"
      FunctionName: !Ref consumerFunctionName
      Handler: !Ref consumerLambdaHandler
      Role: !GetAtt consumerLambdaFunctionRole.Arn
      Runtime: "python3.12"
      Timeout: 60

  consumerLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Join [" ", ["IAM Role for ", !Ref consumerFunctionName, " lambda function"]]
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"           
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      RoleName: !Join ["-", [!Ref consumerFunctionName, "lambda", "role"]]
      Policies:
        - PolicyName: !Join ["-", [!Ref consumerFunctionName, "execution", "policy"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "logs:CreateLogGroup"
                Resource: 
                  - "arn:aws:logs:*:*:*"    
              - Effect: Allow
                Action: 
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - !Join ["", ["arn:aws:logs:*:*:log-group:/aws/lambda/", !Ref consumerFunctionName, ":*"]]  
              - Effect: Allow
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource:
                  - !GetAtt mySqs.Arn

  sqsEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt mySqs.Arn
      FunctionName: !GetAtt consumerMyLambda.Arn


  myS3Bucket:
    Type: AWS::S3::Bucket
    DependsOn: s3LambdaInvokePermission
    Properties:
      BucketName: !Ref s3BucketToMonitor
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt myLambda.Arn

  # Required to allow s3 to invoke a lambda
  s3LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt myLambda.Arn
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Join ["", ["arn:aws:s3:::", !Ref s3BucketToMonitor]]

  mySqs:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref queueName
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt mySqsDLQ.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 120

  # DQL OF THE mySqs
  mySqsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Join ["-", [!Ref queueName, "DLQ"]]
      SqsManagedSseEnabled: false
      VisibilityTimeout: 120
